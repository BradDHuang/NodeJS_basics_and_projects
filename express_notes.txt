
/*
WHAT IS EXPRESS.JS
• A minimal yet flexible and powerful web development framework for node.js

• (1) Minimal

    • Doesn’t come with all sorts of functionality,
    • Supports only the very basic features, not all of them are enabled by default
    
• (2) Flexible and Powerful

    • Uses its own ‘middleware’
    • Use of any nodejs modules
    • Complete access to node API
*/

WHAT DOES IT DO
    • Basic App Object
    • HTTP Requests: Parses arguments and headers
    • HTTP Responses
    • Routing
    • Components, so called Middleware
    • Server-Side Templating: Views / HTML Templates
        • Partials
        • Layouts
    • Configuration
    • Recipe to create a web application

/*
// Load Express and create App instance
APPLICATION OBJECT

    // An instance of Express
    e.g.
    const express = require('express');
    const app = express();
    
REQUEST OBJECT

    // Created when a client makes a request to Express app.
    // e.g.
        req.body 
        Holds the values of a POST form submission
    
RESPONSE OBJECT

    // Created along with the request object.
    // e.g.
        res.status(code) 
        Sets the HTTP response code
    
MIDDLEWARE
• A JavaScript function 
  that is plugged in the middle of processing flow
• (1) Can manipulate Request and Response objects
• (2) Can perform an isolated action
• (3) Can terminate the request flow 
      by returning a response to the client
• (4) Can pass on the control 
      to the next middleware.

• Loaded in an Express app 
  using the app.use() method.
  // e.g.
  app.use([path], function) 
  // Loads a middleware in the app
  
• Parameters
    • req - Request object
    • res - Response object,
    • next - a reference to the next middleware in line
    
    e.g.
    app.use(function(req, res, next) {
        console.log('Request from: ' + req.ip);
        next();
    });
    
ROUTING
// Routing refers to how an application’s endpoints (URIs) respond to client requests. 

• routes : destinations 
  of the HTTP request URIs

• How you tell your app "for this URI, execute this piece of JavaScript code" - called a Route Handler.

• Route Handler
    • responds to an HTTP request,
    • Or pass it on to another handler function if it does not
• 2 approaches
    • Basic
        e.g.
        app.HTTP_METHOD(PATH, ROUTER_HANDLER);
    • Router Object
        e.g.
        const router = express.Router(); 
        // A system middleware
        router.use();
        
        // Use a defined router
        // Load the router module with ‘require’
        const ROUTER_MODULE = require("./mymodule");
        app.use(PARTIAL_PATH, ROUTER_MODULE)
*/

    










